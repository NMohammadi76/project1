import numpy as np
import pandas as pd
from scipy.stats import norm
from scipy.stats import qmc
from google.colab import files
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

from sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error


# Black - Scholes Call Option
def Vc(sk,r,tau,sigma):
  d1 = (np.log(sk)+(r-0.5*sigma**2)*tau)/(sigma*np.sqrt(tau))
  d2 = d1-sigma*np.sqrt(tau)
  w = sk *norm.cdf(d1) - np.exp(-r*tau)*norm.cdf(d2)
  return w
df1= df1[df1['Option type']==1]
df1

X = df1[['Risk free rate','Time to maturity','Moneyness','Implied Volatility']]
y = df1['V/k']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model1 = keras.Sequential(
    [
        keras.Input(shape=(4)),
        layers.Dense(128, activation="relu", name="layer1"),
        layers.Dense(64, activation="relu", name="layer2"),
        layers.Dense(32, activation="relu", name="layer3"),
        layers.Dense(16, activation="relu", name="layer4"),
        layers.Dense(1, activation='linear', name="layer5"),
    ])


model1.compile(
          optimizer="adam",
          loss="mean_squared_error")


model1.fit(
    X_train[['Risk free rate','Time to maturity','Moneyness','Implied Volatility']],
    y_train,
    epochs=500,
    validation_split=0.2)


simple_ann_pred = model1.predict(X_test[['Risk free rate','Time to maturity','Moneyness','Implied Volatility']])

print( 'MSE for ANN & black scholes optin price',mean_squared_error(y_test , simple_ann_pred))
print( 'r2 for ANN & black scholes optin price',r2_score(y_test , simple_ann_pred))
print( 'MAE for ANN & black scholes optin price',mean_absolute_error(y_test , simple_ann_pred))

#print( 'MSE for Black-Scholes & reall optin price',mean_squared_error(y_test , X_test['V/k']))




def V_tilda(sk,r,tau,Vk):
  a = Vk - np.maximum([0],sk-np.exp(-r*tau))
  return np.log(a)



#X1 = df1[['Risk free rate','Time to maturity','Moneyness','V_tilda/k_log']]

X1 = df2[['Risk free rate','Time to maturity','Moneyness','V/k','V_tilda/k_log']]

y1 = df2['Implied Volatility']


X1_train, X1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.2, random_state=42)

model2 = keras.Sequential(
    [
        keras.Input(shape=(5)),
        layers.Dense(128, activation="relu", name="layer1"),
        layers.Dense(64, activation="relu", name="layer2"),
        layers.Dense(32, activation="relu", name="layer3"),
        layers.Dense(16, activation="relu", name="layer4"),
        layers.Dense(1, activation='linear', name="layer5"),
    ])


model2.compile(
          optimizer="adam",
          loss="mean_squared_error")


model2.fit(
    X1_train,
    y1_train,
    epochs=550,
    validation_split=0.2)
